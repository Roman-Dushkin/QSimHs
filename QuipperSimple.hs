{-# OPTIONS_HADDOCK prune, ignore-exports #-}

{------------------------------------------------------------------------------}
{- | Простые функции для генерации квантовых схем на языке Quipper.

   Организация: ООО «А-Я эксперт»
   Автор:       Душкин Р. В.
   Проект:      Квантовые вычисления и функциональное программирование
                                                                              -}
{------------------------------------------------------------------------------}

module QuipperSimple
(
  main
)
where

{-[ СЕКЦИЯ ИМПОРТА ]-----------------------------------------------------------}

import Quipper

import Control.Monad (foldM)

{-[ ФУНКЦИИ ]------------------------------------------------------------------}

-- | Функция, строящая квантовую схему для аналога операции И над кубитами.
andGate :: (Qubit, Qubit) -> Circ Qubit
andGate (a, b) = do c <- qinit False
                    qnot_at c `controlled` [a, b]
                    return c

-- | Функция для построения квантовой схемы, выполняющей конкатенацию над
--   списком кубитов (свёртка списка кубитов при помощи операции И).
andList :: [Qubit] -> Circ Qubit
andList []     = qinit True
andList [q]    = return q
andList (q:qs) = do c <- andList qs
                    r <- andGate (c, q)
                    return r

-- | Альтернативная функция для построения квантовой схемы, выполняющей
--   конкатенацию над списком кубитов. Используется монадическая форма функции
--   свёртки.
andList' :: [Qubit] -> Circ Qubit
andList' qs = do i <- qinit True
                 foldM (curry andGate) i qs

-- | Сервисная функция для вывода на экран диаграммы квантовой схемы для
--   заданной функции.
showScheme qs = print_simple Preview qs

-- | Сервисная функция, полиморфный вариант функции `showScheme`.
showSchemeGeneric qs d = print_generic Preview qs d

-- | Главная функция модуля. Должна быть хоть как-то определена, чтобы
--   интерпретатор quipperi работал.
main = undefined

{-[ КОНЕЦ МОДУЛЯ ]-------------------------------------------------------------}
