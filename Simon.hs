{-# OPTIONS_HADDOCK prune, ignore-exports #-}

{------------------------------------------------------------------------------}
{- | Модуль с описанием функций для реализации квантового алгоритма Саймона.

   Организация: ООО «А-Я эксперт»
   Автор:       Душкин Р. В.
   Проект:      Квантовые вычисления и функциональное программирование
                                                                              -}
{------------------------------------------------------------------------------}

module Simon
(
  simon
)
where

{-[ СЕКЦИЯ ИМПОРТА ]-----------------------------------------------------------}

import Control.Arrow ((&&&))
import Control.Monad (replicateM)
import Data.Complex (Complex(..))
import Data.List (group, sort)

import Circuit
import Gate
import Qubit

{-[ ФУНКЦИИ ]------------------------------------------------------------------}

-- | Целевая функция, период которой необходимо найти. Периодом в данном случае
--   является последовательность (0, 1). Сама функция отображает {0, 1}^2 в это
--   же множество. Из-за ограничений языка Haskell тип этой функции сделан
--   таким. Функция сделана некаррированной для единообразия.
targetF :: (Bool, Bool) -> (Bool, Bool)
targetF (False, False) = (False, True)
targetF (False, True)  = (False, True)
targetF (True,  False) = (True,  False)
targetF (True,  True)  = (True,  False)

-- | Оракул, построенный на основе функции `targetF`.
oracle :: Matrix (Complex Double)
oracle = matrixToComplex [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]

-- | Основная функция модуля, демонстрирующая алгоритм Саймона. Принимает на
--   вход оракул, возвращает результат измерения всех регистров (для алгоритма
--   необходим только первый, то есть в данном случае, первые два кубита).
simon :: Matrix (Complex Double) -> IO String
simon o = initial |> gateH2I2
                  |> o
                  |> gateH2I2
                  >>> (measure . fromVector 4)
  where
    initial  = toVector $ foldr entangle qubitZero $ replicate 3 qubitZero
    gateH2I2 = gateHn 2 <++> gateIn 2

-- | Главная функция модуля, которая строит гистограмму результатов измерения
--   квантового регистра, запуская алгоритм Саймона заданное количество раз.
main :: Int -> IO [(Int, String)]
main n = do l <- replicateM n $ simon oracle
            return $ map (length &&& head) $ group $ sort l

{-[ КОНЕЦ МОДУЛЯ ]-------------------------------------------------------------}
