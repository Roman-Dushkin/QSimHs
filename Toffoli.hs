{-# OPTIONS_HADDOCK prune, ignore-exports #-}

{------------------------------------------------------------------------------}
{- | Описание функций для представления элементов Тоффоли и Фредкина, а также
     различных функций для представления всех интересных логических элементов,
     выраженных через элементы Тоффоли и Фредкина.

   Организация: ООО «А-Я эксперт»
   Автор:       Душкин Р. В.
   Проект:      Квантовые вычисления и функциональное программирование
                                                                              -}
{------------------------------------------------------------------------------}

module Toffoli where

{-[ СЕКЦИЯ ИМПОРТА ]-----------------------------------------------------------}

import Prelude hiding (not, and, or)

{-[ ФУНКЦИИ ]------------------------------------------------------------------}

-- | Служебная функция для получения первого компонента результата, который
--   возвращается элементами Тоффоли и Фредкина.
getX :: (Int, Int, Int) -> Int
getX (x, _, _) = x

-- | Служебная функция для получения второго компонента результата, который
--   возвращается элементами Тоффоли и Фредкина.
getY :: (Int, Int, Int) -> Int
getY (_, y, _) = y

-- | Служебная функция для получения третьего компонента результата, который
--   возвращается элементами Тоффоли и Фредкина.
getZ :: (Int, Int, Int) -> Int
getZ (_, _, z) = z

-- | Функция, реализующая элемент Тоффоли. В принципе, работает для любых
--   натуральных чисел, но семантически корректные результаты выдаёт только для
--   чисел 0 и 1.
toffoli :: Int -> Int -> Int -> (Int, Int, Int)
toffoli 1 1 0 = (1, 1, 1)
toffoli 1 1 1 = (1, 1, 0)
toffoli x y z = (x, y, z)

-- | Элемент Тоффоли, реализованный при помощи элемента Фредкина.
toffoli' :: Int -> Int -> Int -> (Int, Int, Int)
toffoli' x y z = (x, y, xor' z $ and' x y)

-- | Функция, реализующая элемент Фредкина. В принципе, работает для любых
--   натуральных чисел, но семантически корректные результаты выдаёт только для
--   чисел 0 и 1.
fredkin :: Int -> Int -> Int -> (Int, Int, Int)
fredkin 1 a b = (1, b, a)
fredkin x y z = (x, y, z)

-- | Элемент Фредкина, реализованный при помощи элемента Тоффоли.
fredkin' :: Int -> Int -> Int -> (Int, Int, Int)
fredkin' x y z = (x, xor y s, xor z s)
  where
    s = and x $ xor y z

-- | Выражение логической операции НЕ при помощи элемента Тоффоли.
not :: Int -> Int
not = getZ . toffoli 1 1

-- | Выражение логической операции И при помощи элемента Тоффоли.
and :: Int -> Int -> Int
and a b = getZ $ toffoli a b 0

-- | Выражение логической операции НЕ-И при помощи элемента Тоффоли.
nand :: Int -> Int -> Int
nand a b = getZ $ toffoli a b 1

-- | Выражение логической операции ИЛИ при помощи элемента Тоффоли.
or :: Int -> Int -> Int
or a b = not $ and (not a) (not b)

-- | Выражение логической операции НЕ-ИЛИ при помощи элемента Тоффоли.
nor :: Int -> Int -> Int
nor a b = not $ or a b

-- | Выражение логической операции Исключающее ИЛИ при помощи элемента Тоффоли.
xor :: Int -> Int -> Int
xor a b = getZ $ toffoli 1 a b

-- | Выражение элемента FANOUT (дублирование бита) через элемент Тоффоли.
fanout :: Int -> (Int, Int)
fanout a = (getY t, getZ t)
  where
    t = toffoli 1 a 0

-- | Выражение логической операции НЕ при помощи элемента Фредкина.
not' :: Int -> Int
not' a = getZ $ fredkin a 0 1

-- | Выражение логической операции И при помощи элемента Фредкина.
and' :: Int -> Int -> Int
and' a b = getZ $ fredkin a b 0

-- | Выражение логической операции НЕ-И при помощи элемента Фредкина.
nand' :: Int -> Int -> Int
nand' a b = not' $ and' a b

-- | Выражение логической операции ИЛИ при помощи элемента Фредкина.
or' :: Int -> Int -> Int
or' a b = not' $ and' (not' a) (not' b)

-- | Выражение логической операции НЕ-ИЛИ при помощи элемента Фредкина.
nor' :: Int -> Int -> Int
nor' a b = not' $ or' a b

-- | Выражение логической операции Исключающее ИЛИ при помощи элемента Фредкина.
xor' :: Int -> Int -> Int
xor' a b = or' (and' b $ not' a) (and' a $ not' b)

-- | Выражение элемента FANOUT (дублирование бита) через элемент Фредкина.
fanout' :: Int -> (Int, Int)
fanout' a = (getX f, getZ f)
  where
    f = fredkin a 1 0

-- | Специальная функция, которая проверяет равенство двух реализаций функций,
--   представляющих элементф Тоффоли и элементы Фредкина на всей их области
--   определения.
test :: Int -> Bool
test 1 = all id [toffoli x y z == toffoli' x y z | x <- [0..1], y <- [0..1], z <- [0..1]]
test 2 = all id [fredkin x y z == fredkin' x y z | x <- [0..1], y <- [0..1], z <- [0..1]]
test _ = undefined

{-[ КОНЕЦ МОДУЛЯ ]-------------------------------------------------------------}
